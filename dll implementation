#include<stdio.h>
#include<stdlib.h>

typedef struct node {
    int info;
    struct node* rlink;
    struct node* llink;
} *NODE;

NODE getnode() {
    NODE x;
    x = (NODE)malloc(sizeof(struct node));
    if (x == NULL) {
        printf("Memory is full");
        exit(0);
    }
    return x;
}

NODE insert(NODE first, int ele) {
    NODE temp;
    temp = getnode();
    temp->info = ele;
    temp->llink = temp->rlink = NULL;
    if (first == NULL) {
        return temp;
    }
    temp->rlink = first;
    first->llink = temp;
    return temp;
}

NODE insert_rear(NODE first, int ele) {
    NODE temp, cur;
    temp = getnode();
    temp->info = ele;
    temp->llink = temp->rlink = NULL;
    if (first == NULL) {
        return temp;
    }
    cur = first;
    while (cur->rlink != NULL) {
        cur = cur->rlink;
    }
    cur->rlink = temp;
    temp->llink = cur;
    return first;
}

NODE delete_front(NODE first) {
    NODE cur;
    if (first == NULL) {
        return NULL;
    }
    printf("deleted ele is %d\n", first->info);
    cur = first->rlink;
    if (cur != NULL) {
        cur->llink = NULL;
    }
    free(first);
    return cur;
}
NODE delete_rear(NODE first)
{
    NODE cur,prev;
    if(first==NULL)
    return NULL;
    prev=NULL;
    cur=first;
    while(cur->rlink!=NULL)
    {
        prev=cur;
        cur=cur->rlink;
    }
    prev->rlink=NULL;
    printf("%d is deleted",cur->info);
    free(cur);
    return first;
}

void display(NODE first) {
    NODE cur;
    if (first == NULL) {
        printf("List is empty\n");
        return;
    }
    cur = first;
    while (cur != NULL) {
        printf("%d ", cur->info);
        cur = cur->rlink;
    }
    printf("\n");
}

int main() {
    int ch, ele;
    NODE first = NULL;
    while (1) {
        printf("1.insert front\n2.insert rear\n3.delete front\n4.delete rear\n5.display\n");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                printf("Enter value: ");
                scanf("%d", &ele);
                first = insert(first, ele);
                break;
            case 2:
                printf("Enter value: ");
                scanf("%d", &ele);
                first = insert_rear(first, ele);
                break;
            case 3:
                first = delete_front(first);
                break;
            case 4:
                first=delete_rear(first);
                break;
            case 5:
                display(first);
                break;
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}
